{
  "technologies": {
    "framework": "Фреймворк / Бібліотека",
    "typescript": "Типізація",
    "architecture": "Архітектура",
    "configuration": "Конфігурація та інфраструктура",
    "data": "Робота з даними та запити на сервер",
    "features": "App's features",
    "ui": "UI",
    "optimisation": "Оптимізація",
    "testing": "Тестування"
  },
  "descriptions": {
    "framework": "**React**",
    "typescript": "Для забезпечення суворої типізації **JavaScript** застосунок розроблявся на **TypeScript**",
    "architecture": "Архітектура застосунку відповідає методології **Feature Sliced Design** для забезпечення модульності, перевикористовуваності та односпрямованого потоку даних",
    "configuration": "Інфраструктура налаштована таким чином, що сам проєкт, тестове середовище та Storybook можуть використовувати всі функції та працювати як єдине ціле (наприклад, TypeScript, CSS модулі, глобальні змінні збірки тощо). \n- **Webpack** використовується як бандлер з повною конфігурацією проєкту \n- Stories для кожного компонента та всіх його станів описані за допомогою **Storybook** \n- Для лінтингу використовується **ESLint**, а для форматування — **Prettier** \n- У проєкті налаштовано **CI pipeline**, який виконує три типи тестів, будує проєкт та Storybook, а також запускає лінтери \n- Для **pre-commit hooks** налаштовано Husky \n- Реалізовано **генерацію звітів для юніт-тестів та тестів на скріншоти**, з інформацією про успішні та невдалі тести",
    "data": "**Redux Toolkit** використовується як менеджер стану, а **RTK Query** використовується для запитів до json-server",
    "features": "**Авторизація, фільтри, пошук, сортування, пагінація, коментарі, i18n, темізація, два варіанти інтерфейсу (старий та новий), сповіщення, маршрутизація, рейтинг статей**. \n Крім того, у додатку реалізовані концепції, такі як **feature flags** (можливість увімкнення/вимкнення функцій на основі певних умов) та **JSON settings** (налаштування користувача, збережені на бекенді)",
    "ui": "Для цього додатка використовується **UI kit власної розробки**. Більше 20 компонентів інтерфейсу користувача, включаючи модальні вікна з порталами, спадні списки/меню, бічні панелі, кнопки з різними темами, скелети, спливаючі вікна, ліниві зображення, ящики, аватари, вертикальні та горизонтальні стеки тощо. Крім того, в додатку реалізовано **три кольорові теми**",
    "optimisation": "Для оптимізації застосунку було проведено аналіз та усунення непотрібних повторних рендерів, а також аналіз розміру бандла. Було впроваджено **розбиття коду шляхом відкладеного завантаження компонентів і редюсерів Redux**. Крім того, для покращення продуктивності використовувалися такі техніки, як **нормалізація даних, віртуалізація** (віртуальна прокрутка), **throttling, debouncing**, **ін'єкція ендпоінтів та асинхронне завантаження бібліотек** (для анімацій та функціоналу drag and drop)",
    "testing": "У проекті використовуються 4 види тестів: \n- **Юніт-тести** з **Jest** \n- **Тести компонентів** за допомогою **React Testing Library (RTL)** \n- **Скріншотне тестування** для регресійного тестування інтерфейсу за допомогою **Loki** \n- **End-to-End (E2E) тестування** за допомогою **Cypress**"
  }
}